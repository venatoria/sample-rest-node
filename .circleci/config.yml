version: 2
#
# CircleCI Config for eMasters Connection API
# Full CI/CD Workflow
# Can extend later if needed
# We only assume the following :
# - That CircleCI has ssh access to the remote ec2
# - That the instance has Docker installed and running (must in every scenario)
jobs:
     # The build job
     deploy:
          working_directory: ~/app
          docker:
               - image: docker:17.05.0-ce-git
          steps:
               - checkout #get fresh code form github
               - setup_remote_docker #enable remote docker execution
               - run:
                    name: building image #We build here so we don't need pulling code into ec2
                    command: docker build -t venatoria/emasters-connection-api .
               - run:
                    # We need the image as real file
                    # This way we can send it to the ec2 instead of pushing to registery
                    # Working around a registery (dockerHub or ECR) saves money and setup
                    name: save the image for deployement
                    command: docker save -o emasters-connection-docker-image.tar venatoria/emasters-connection-api
               - run:
                    name: Copy the image to our instance
                    command: scp -o StrictHostKeyChecking=no emasters-connection-docker-image.tar ubuntu@ec2-18-216-231-124.us-east-2.compute.amazonaws.com:~
               - run:
                    name: Copy the deploy script
                    command: command: scp -o StrictHostKeyChecking=no deploy.sh ubuntu@ec2-18-216-231-124.us-east-2.compute.amazonaws.com:~
               - run:
                    name: Deploy prod build
                    # We ssh into the ec2 to load the saved image and run it
                    command:  ssh -o StrictHostKeyChecking=no ubuntu@ec2-18-216-231-124.us-east-2.compute.amazonaws.com "cd ~; sh deploy.sh"
                    #command: ssh -o StrictHostKeyChecking=no ubuntu@ec2-18-191-199-62.us-east-2.compute.amazonaws.com "cd ~/proak-dota2; sh deploy.sh"

workflows:
     version: 2
     build_and_deploy:
          jobs:
               - deploy
